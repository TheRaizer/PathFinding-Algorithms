[{"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\index.js":"1","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\App.js":"2","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Grid.js":"3","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Cell.js":"4","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Header.js":"5","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\CellActions.js":"6","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Heap.js":"7","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\AStarAlgorithm.js":"8","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Search.js":"9","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\UtilityFuncs.js":"10","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\DijkstrasAlgorithm.js":"11"},{"size":266,"mtime":1612152525669,"results":"12","hashOfConfig":"13"},{"size":204,"mtime":1612395908604,"results":"14","hashOfConfig":"13"},{"size":3882,"mtime":1612639003730,"results":"15","hashOfConfig":"13"},{"size":3742,"mtime":1612637767573,"results":"16","hashOfConfig":"13"},{"size":2358,"mtime":1612568998085,"results":"17","hashOfConfig":"13"},{"size":2384,"mtime":1612643370406,"results":"18","hashOfConfig":"13"},{"size":4047,"mtime":1612564960949,"results":"19","hashOfConfig":"13"},{"size":3396,"mtime":1612641740816,"results":"20","hashOfConfig":"13"},{"size":434,"mtime":1612568685006,"results":"21","hashOfConfig":"13"},{"size":81,"mtime":1612549048419,"results":"22","hashOfConfig":"13"},{"size":4915,"mtime":1612637699803,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1gtnft7",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\index.js",[],["48","49"],"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\App.js",[],"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Grid.js",[],"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Cell.js",[],"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Header.js",[],"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\CellActions.js",["50"],"import FormImpl from \"react-bootstrap/esm/Form\";\r\nimport { gridCl } from \"./Grid\";\r\nimport { searchVars } from \"./Search\";\r\n\r\nexport const CELL_TYPES = {\r\n  EMPTY: 0,\r\n  START: 1,\r\n  END: 2,\r\n  OBSTACLE: 3,\r\n  OPENED: 4,\r\n  CLOSED: 5,\r\n  IS_ON_PATH: 6,\r\n};\r\n\r\nexport const isFinishOrStart = (evt, cell) => {\r\n  if (evt.altKey) {\r\n    // if the cell is the end cell\r\n    if (cell.cellType === CELL_TYPES.END) {\r\n      gridCl.endCell = null;\r\n      changeCellType(cell, CELL_TYPES.EMPTY);\r\n    } else {\r\n      // if the start cell is this cell\r\n      if (cell.cellType === CELL_TYPES.START) {\r\n        // empty the start cell\r\n        gridCl.startCell = null;\r\n      }\r\n      // if there is a end cell\r\n      if (gridCl.endCell != null) {\r\n        // empty the end cell\r\n        changeCellType(gridCl.endCell, CELL_TYPES.EMPTY);\r\n      }\r\n      // change the end cell to be this cell\r\n      changeCellType(cell, CELL_TYPES.END);\r\n      gridCl.endCell = cell;\r\n    }\r\n  } else if (evt.ctrlKey) {\r\n    // if the cell is the start cell then make it empty\r\n    if (cell.cellType === CELL_TYPES.START) {\r\n      gridCl.startCell = null;\r\n      changeCellType(cell, CELL_TYPES.EMPTY);\r\n    } else {\r\n      // if the cell type is the end\r\n      if (cell.cellType === CELL_TYPES.END) {\r\n        // empty the end cell\r\n        gridCl.endCell = null;\r\n      }\r\n\r\n      // if there is a start cell\r\n      if (gridCl.startCell != null) {\r\n        // empty it\r\n        changeCellType(gridCl.startCell, CELL_TYPES.EMPTY);\r\n      }\r\n      // make this cell the start\r\n      changeCellType(cell, CELL_TYPES.START);\r\n      gridCl.startCell = cell;\r\n    }\r\n  }\r\n};\r\n\r\nexport const determineCellType = (\r\n  evt,\r\n  mouseDown,\r\n  cellTypeOnMouseDown,\r\n  cell\r\n) => {\r\n  if (mouseDown) {\r\n    if (cellTypeOnMouseDown === -1) return;\r\n    const cellType =\r\n      cellTypeOnMouseDown === CELL_TYPES.EMPTY\r\n        ? CELL_TYPES.OBSTACLE\r\n        : CELL_TYPES.EMPTY;\r\n    if (cell.cellType !== cellType && !evt.altKey && !evt.ctrlKey) {\r\n      if (cell === gridCl.endCell || cell === gridCl.startCell) {\r\n        return;\r\n      }\r\n      if ((cell.closed || cell.opened) && searchVars.isSearching) {\r\n        return;\r\n      }\r\n      changeCellType(cell, cellType);\r\n    }\r\n  }\r\n};\r\n\r\nconst changeCellType = (cell, cellType) => {\r\n  cell.cellType = cellType;\r\n  cell.setCellRerender((rerender) => !rerender);\r\n};\r\n","C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Heap.js",[],"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\AStarAlgorithm.js",[],"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\Search.js",[],"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\UtilityFuncs.js",[],"C:\\Users\\Admin\\WebDevProjects\\PathFindingSite\\path-finding\\src\\DijkstrasAlgorithm.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":1,"column":8,"nodeType":"57","messageId":"58","endLine":1,"endColumn":16},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'FormImpl' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]